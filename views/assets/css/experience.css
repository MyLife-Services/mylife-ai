/* Font Awesome CDN if needed */
/* css experience variables */
:root {
    --dialog-final-opacity: 0.5;
}
/* modal experience screen */
.modal-screen {
    animation: dropDown 1.2s ease-in forwards; /* @todo: convert to class */
    background-color: rgba(0, 0, 0, 0.88); /* Black with opacity */
    border: 1.2em solid rgb(0,0,0);
    cursor: progress;
    display: flex;
    flex-direction: column;
    height: 100vh;
    left: 0;
    overflow: auto;
    padding-top: 2.4em;
    position: fixed;
    top: -100vh; /* Start above the screen */
    width: 100vw;
    z-index: 10;
}
/* experience transport */
#experience-breadcrumb {
    color: #ccc; /* Light gray text */
    flex-grow: 1; /* Allow breadcrumb to take up remaining space */
    padding: 0 15px;
}
#experience-close, #experience-skip {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background-color: #000;
    color: red;
    font-size: 24px; /* Adjust size as needed */
    cursor: pointer;
}
.experience-transport {
    align-items: center;
    background-color: #0000; /* transparent background */
    display: none; /* Hide transport controls by default */
    justify-content: space-between;
    padding: 1.2em;
    z-index: 100; /* highest z-index */
}
.experience-transport-item {
    display: flex;
    align-items: center;
    justify-content: center;
}
/* experience manifest */
.experience-manifest {
    display: flex;
    justify-content: space-between;
    margin-top: 10px; /* Space from the transport controls */
}
.experience-cast-container, .experience-navigation-container {
    display: none; /* Hide cast and navigation by default */
    flex-basis: 49%; /* Splits the container space equally with a little gap */
    padding: 10px;
    background-color: #f0f0f0; /* Light grey background */
    border-radius: 5px; /* Rounded corners */
}
.experience-cast-container {
    flex-wrap: wrap;
    align-items: center;
    justify-content: flex-start; /* Align cast icons and text to start */
    gap: 10px; /* Space between cast items */
}
.experience-navigation-container {
    align-items: center;
    justify-content: space-around; /* Evenly space navigation boxes */
}
/* experience stage */
.experience-stage {
    display: flex;
    position: relative;
    width: 100%;
    height: 100%;
    background-color: rgb(0, 0, 0);
    overflow: hidden;
}
/* backstage */
.experience-backstage {
    align-items: center;
    animation: fadeIn 2s ease-out forwards;
    background-color: rgba(0, 0, 0, 0.8); /* Semi-transparent black background */
    display: none; /* Hide by default */
    flex-direction: column;
    height: 100%;
    justify-content: flex-start; /* Align content to the top */
    left: 0;
    position: absolute;
    top: 0;
    width: 100%;
    z-index: 15; /* Ensure it's behind the mainstage */
}
.experience-explanation, .experience-title, .experience-description {
    text-align: center; /* Center text for direct children */
    width: 80%; /* Adjust width as needed */
    margin: 2em 0;
    padding: 0 2em;
    display: flex;
    flex-direction: column;
    font-size: 1em;
    justify-content: center; /* Center content vertically */
    align-items: center; /* Center content horizontally */
    color: white;
}
.experience-explanation h2 {
    font-size: 2em; /* Larger font for the welcome message */
    animation: textFadeIn 1s ease-in-out forwards;
}
.experience-explanation p {
    color: greenyellow;
    margin-top: .2em;
    animation: textFadeIn 2s ease-in forwards;
}
.experience-start {
    align-items: center;
    animation: fadeIn 3s ease forwards;
    display: none; /* Hide the start button by default */
    flex-direction: column;
    height: 100%;
    justify-content: center;
    width: 100%;
}
.experience-start-button {
    align-items: center; /* Center text vertically */
    animation: blink 1.5s infinite;
    border: 2px solid black; /* Black border */
    border-radius: 50%; /* Essential for circle */
    background-color: green;
    box-shadow: inset 0 0 10px #000000, /* Inner shadow */
                0 0 20px rgba(255, 255, 255, 0.7); /* Glow effect */
    color: white;
    cursor: pointer;
    display: none;
    flex-direction: column; /* Stack text lines */
    font-size: 1.2em;
    height: 100px; /* Fixed height to match width for circle */
    justify-content: center; /* Center text horizontally */
    line-height: 1.2; /* Adjust line spacing */
    margin-top: .3em;
    margin-bottom: .3em;
    overflow: hidden;
    padding: 20px; /* Adjust padding to maintain the circle shape */
    position: relative;
    text-align: center; /* Ensure text is centered */
    white-space: normal; /* Override any parent white-space properties */
    width: 100px; /* Fixed width */
}
.experience-start-button::before {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: rgba(255, 255, 255, 0.2);
    transform: rotate(45deg);
    pointer-events: none;
    filter: blur(5px);
}
.experience-start-button:hover {
    background-color: #9ACD32; /* Yellow-Green color */
    box-shadow: inset 0 0 10px #000000, 0 0 20px rgba(255, 255, 255, 0.9); /* Adjust glow effect if needed */
    color: black;
}
.experience-title {
    animation: textFadeIn 3s ease-in-out forwards;
    font-weight: bold;
    font-size: 2em; /* Larger font for the title */
    margin: 0.2em 0;
    text-decoration: underline;
}
.experience-description {
    animation: textFadeIn 5s ease-in-out forwards;
}
/* mainstage */
.experience-continue {
    align-items: center; /* Center children horizontally */
    background: linear-gradient(0deg, transparent, black 30%, black 70%, transparent);
    color: aliceblue;
    display: none; /* Use flexbox for layout */
    flex-direction: column; /* Stack children vertically */
    height: 40vw; /* Auto height based on content */
    justify-content: center; /* Center children vertically */
    left: 50%; /* Center horizontally */
    padding: 20px; /* Padding around the content */
    position: fixed; /* Position it relative to the viewport */
    top: 50%; /* Center vertically */
    transform: translate(-50%, -50%); /* Adjust the position to truly center the element */
    width: 100vw; /* Auto width based on content */
    z-index: 1000; /* Ensure it's above all other items */
}
.experience-continue-text, .experience-continue-click-text {
    text-align: center; /* Center the text inside the divs */
}
.experience-continue-click-text.pulse {
    animation: blink 1.5s infinite;
}
.experience-mainstage {
    align-items: center; /* Center children horizontally in the container */
    background-color: rgba(252, 192, 124, 0.2); /* Light grey background, as you had */
    border-radius: 15px; /* Adjust as needed for desired roundness */
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1), 0 1px 3px rgba(0, 0, 0, 0.08); /* Optional: adds shadow for depth */
    display: none; /* Hide by default */
    flex-direction: column; /* Stack children vertically */
    height: 100%; /* Fill the height of its parent container */
    justify-content: center; /* Center children vertically in the container */
    left: 0;
    opacity: 1; /* In case you want to make it visible */
    overflow-x: hidden; /* Ensures content respects the border radius */
    overflow-y: hidden;
    position: absolute; /* Or fixed, depending on layout */
    top: 0;
    /* transition: all 0.3s ease-in-out; /* Smooth transition for any changes */
    width: 100%; /* Fill the width of its parent container */
    z-index: 20; /* Ensure it's above the backstage */
}
.experience-scenestage {
    display: flex; /* Use flexbox instead of grid */
    flex-direction: row; /* Add entities horizontally */
    flex-grow: 1; /* Allow the scene stage to grow */
    flex-shrink: 1; /* Allow the scene stage to shrink */
    align-items: flex-start; /* Align items to the start of the flex container */
    height: 100%; /* Fill the height of its parent container */
    overflow: auto;
    overflow-y: hidden;
    padding: 1.2em; /* Adjust as needed */
    width: 100%; /* Span the full width of the parent container */
}
/* experience moderator */
/* experience input */
.experience-input {
    align-items: center;
    color: #000; /* Text color for input */
    display: none; /* Hide by default */
    margin: 0.4em 0;
    width: 100%;
}
.experience-input-dialog {
    display: flex;
    flex-direction: column; /* Stack items vertically */
    height: 100%; /* Fill the height of its parent container */
    justify-content: flex-start; /* Align content to the start */
    overflow: hidden; /* Hide overflow content */
    padding-left: 1.2em;
    width: 80%; /* Take up the rest of the space */
}
.experience-moderator {
    align-items: flex-start; /* Align items to the start of the cross axis */
    /* background-color: #e7c5ff; /* TEST: Solid black background */
    display: none; /* Hide by default */
    flex-direction: column;
    flex-grow: 0; /* Do not allow the moderator to grow */
    flex-shrink: 1;
    flex-wrap: wrap; /* Allow items to wrap to the next line */
    justify-content: space-between; /* Distribute space between items */
    padding: 10px;
    margin-top: auto; /* Push to the bottom */
    max-height: 10em; /* Limit the height of the moderator */
    width: 100%; /* Span the full width of the parent container */
}
.experience-moderator-icon, .experience-moderator-dialog, .experience-moderator-props {
    min-width: 0; /* Allow items to shrink below their content width */
}
.experience-moderator-dialog {
    display: flex;
    flex-basis: 70%; /* Span the full width of the parent container */
    flex-direction: row;
    flex-grow: 1; /* Allow the dialog to grow */
    flex-shrink: 1; /* Allow the dialog to shrink */
    height: 100%;
    overflow: hidden;
    width: 100%;
}
.experience-moderator-icon {
    align-items: center; /* Align items to the center of the container */
    display: flex; /* show by default */
    flex-shrink: 0; /* Do not allow the icon to shrink */
    height: auto;
    justify-content: center; /* Center items horizontally */
    padding: 0.2em; /* Adjust as needed */
    width: 20%; /* Span 20% of the parent container */
}
.experience-moderator-icon img {
    max-height: 100%; /* Make the image's height not exceed the parent container's height */
    max-width: 100%; /* Make the image's width not exceed the parent container's width */
}
.experience-moderator-props {
    width: 0% !important; /* @todo - fix whatever causes character props to be added as class */
}
.input-submit {
    background-color: cadetblue;
    border-color: aliceblue;
    border-width: thin;
    border-style: solid;
    color: aliceblue;
    cursor: pointer; /* Change cursor to indicate it's clickable */
    display: flex;
    font-size: 1em;
    margin: 0.5em;
    padding: 0.5em;
}
.input-submit:hover {
    background-color: orange;
    border-color: yellowgreen;
    color: bisque;
    font-weight: bold;
    text-shadow: 0.1em 0.1em rgba(0,0,0,.7);
    transform: scale(1.05);
}
.input-text {
    box-sizing: border-box;
    border-radius: .2em;
    max-height: calc(1.2em * 3); /* Limit the height to 3 lines of text */
    min-height: 1.2em;
    overflow: auto; /* Add a scrollbar when the content exceeds the max height */
    padding: 0.1em;
    resize: none; /* height is calculated */
    width: 85%; /* Adjust as needed */
}
/* character lane */
.char-lane {
    align-items: flex-start; /* Align items to the start (left) of the container */
    background: white; /* Assuming a light background to contrast the shadow */
    border: 4px solid black; /* Thick black border */
    border-radius: 8px; /* Slightly rounded corners */
    box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.5); /* Inset shadow for depth */
    box-sizing: border-box; /* Ensure padding is included in width/height */
    display: none; /* keep hidden at start, use classes .hide/.show */
    flex-direction: column;
    justify-content: flex-start; /* Align items to the start of the container */
    height: 100%;
    overflow: hidden;
    padding: 16px; /* Add some padding inside the lane */
    transform-style: preserve-3d; /* Ensure children are rendered in 3D space */
    width: 100%; /* Fill the width of its parent container */
}
.char-icon, .char-props {
    display: flex;
    width: 100%; /* Each character item fills the width */
}
/* Base dialog style */
.char-dialog {
    display: flex;
    flex-direction: column; /* Stack items vertically and reverse the order */
    max-width: 100%; /* Dialog box maximum width */
    margin: 0 auto; /* Center the dialog box */
    /* overflow-x: hidden; /* Hide horizontal overflow */
    overflow-y: auto; /* Add a scrollbar when the content exceeds the box height */
    padding: 0.2em; /* Adjust padding as needed */
}
.char-dialog-box {
    display: none; /* Hide by default */
    border-radius: 8px;
    border: .1em solid #000;
    box-shadow: .1em .1em 0 rgba(0, 0, 0, 0.1);
    margin-bottom: 10px; /* Space between dialog boxes */
    padding: 8px 12px;
    position: relative; /* For positioning the arrow */
}
/* Speech bubble arrow */
.char-dialog-box::after {
    content: '';
    position: absolute;
    top: -1em; /* Adjust based on the size of the arrow */
    left: 2em; /* Adjust based on the size of the arrow */
    border-width: 0 1em 1em;
    border-style: solid;
    border-color: transparent transparent #000 transparent;
}
/* Type 1: Classic white bubble */
.dialog-type-1 {
    background-color: white;
    color: blueviolet;
}
/* Type 2: Think bubble - dotted border */
.dialog-type-2 {
    border-style: dotted;
    background-color: white;
    color: #330058;
}
/* Type 3: Shout bubble - spike border */
.dialog-type-3 {
    /* clip-path: polygon(0 0, 94% 0, 100% 50%, 94% 100%, 0 100%); */
    color: blue;
    background-color: #ffcccc; /* Light red background */
}
.dialog-type-moderator {
    background-color: #32e4ff; /* Light red background */
    color: #330058;
    margin: 0.1em;
    max-width: 70%;
    min-width: 40%;
}
/* character icon */
.char-icon {
    flex-direction: row;
    height: 5em;
    justify-content: flex-start;
    margin-bottom: 1em;
}
.char-icon-image {
    flex: 0 1 auto; /* Allow the container to shrink and grow */
    height: 100%; /* Fill the height of the parent container */
}
.char-icon-image img {
    max-height: 100%; /* Make the image's height not exceed the parent container's height */
    max-width: 100%; /* Make the image's width not exceed the parent container's width */
    height: auto; /* Keep the aspect ratio of the image */
    width: auto; /* Allow the width to automatically adjust based on the height */
}
.char-icon-text {
    color: antiquewhite;
    display: flex;
    flex-direction: column;
    font-size: 2vw; /* Adjust font size as needed */
    justify-content: center;
    margin-left: 1em; /* Space between the image and the text */
    text-shadow: 2px 2px #000;
}
/* Example styling for cast icons and navigation boxes */
.cast-icon, .navigation-box {
    width: 50px; /* Example size, adjust as needed */
    height: 50px;
    border-radius: 50%; /* Circular icons and navigation boxes */
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: #320606; /* Example color, adjust as needed */
    color: #000;
    font-weight: bold;
}
.navigation-box.active {
    background-color: #4CAF50; /* Highlight color for active navigation box */
}
/* footer */
.experience-footer {
    align-items: center;
    background-color: #330058; /* Solid black background */
    color: whitesmoke;
    display: none; /* Hide by default */
    height: fit-content;
    justify-content: space-between;
    margin: 0;
    padding: 0;
}
/* utility classes */
.animate {
    animation: fadeIn 500ms;
}
.animation-default {
    animation: fadeIn 2s ease-out forwards;
}
.appear {
    animation: fadeIn 200ms ease-in forwards;
}
.dialog-fade {
    animation: dialogFade 12s;
}
.dialog-fade-final {
    opacity: var(--dialog-final-opacity);
}
.fade-in {
    animation: fadeIn 1s ease-out forwards;
}
.fade-in-slow {
    animation: fadeIn 6s ease-in forwards;
}
.fade-out {
    animation: fadeOut 2s ease-out forwards;
}
.flip {
    animation: flipAnimation 0.6s ease-in-out forwards;
}
.hide {
    animation: none !important;
    display: none !important;
}
.loading-text {
    color: yellowgreen;
    font-size: 1.1em;
    margin: 0;
    padding: 0;
}
.pulse {
    animation: blink 1.5s infinite;
}
.show {
    display: flex !important;
}
.slide, .slide-right, .slide-in {
    animation: slideInFromLeft 2s ease-in-out forwards;
}
.slide-down {
    animation: slideInFromTop 2s ease-in-out forwards;
}
.slide-left, .slide-out {
    animation: slideInFromRight 2s ease-in-out forwards;
}
.slide-up {
    animation: slideInFromBottom 2s ease-in-out forwards;
}
.spinner {
    animation: spin 1.7s infinite linear;
    border: 4px solid rgba(0, 0, 0, 0.1);
    border-left-color: #09f;
    border-radius: 50%;
    display: inline-flex;
    height: 1.2em;
    margin: auto 0.4em;
    width: 1.2em;
}
/* Keyframes */
@keyframes blink {
    0%, 100% { opacity: 1; }
    60% { opacity: 0.5; }
}
@keyframes dialogFade {
    0% { opacity: 0; }
    10% { opacity: 1; }
    90% { opacity: 1; }
    100% { opacity: var(--dialog-final-opacity); }
}
@keyframes dropDown {
    100% { top: 0; }
}
@keyframes fadeIn {
    0% { opacity: 0; }
    100% { opacity: 1; }
}
@keyframes flipAnimation {
    0% { transform: rotateY(180deg); }
    100% { transform: rotateY(0); }
}
@keyframes textFadeIn {
    0% { opacity: 0; transform: translateY(20px); }
    100% { opacity: 1; transform: translateY(0); }
}
@keyframes fadeOut {
    0% { opacity: 1; }
    100% { opacity: 0; }    
}
@keyframes slideInFromBottom {
    0% { transform: translateY(100%); }
    100% { transform: translateY(0); }
}
@keyframes slideInFromLeft {
    0% { transform: translateX(-100%); }
    100% { transform: translateX(0); }
}
@keyframes slideInFromRight {
    0% { transform: translateX(100%); }
    100% { transform: translateX(0); }
}
@keyframes slideInFromTop {
    0% { transform: translateY(-100%); }
    100% { transform: translateY(0); }
}
@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}
/* squeeze-out */
@keyframes squeezeOutFromBottom {
    from { transform: scaleY(0); transform-origin: bottom; } /* Ensure scaling happens from the left */
    to { transform: scaleY(1); }
}
@keyframes squeezeOutFromLeft {
    from { transform: scaleX(0); transform-origin: left; } /* Ensure scaling happens from the left */
    to { transform: scaleX(1); }
}
@keyframes squeezeOutFromRight {
    from { transform: scaleX(0); transform-origin: right; } /* Ensure scaling happens from the left */
    to { transform: scaleX(1); }
}
@keyframes squeezeOutFromTop {
    from { transform: scaleY(0); transform-origin: top; } /* Ensure scaling happens from the left */
    to { transform: scaleY(1); }
}
/* media queries */
/* Set a minimum font size */
@media (max-width: 480px) {
    .char-icon-text {
        font-size: 1.2em; /* Minimum font size */
    }
}
/* Set a maximum font size */
@media (min-width: 800px) {
    .char-icon-text {
        font-size: 2em; /* Maximum font size */
    }
}