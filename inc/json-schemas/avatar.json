{
	"$schema": "http://json-schema.org/schema",
	"$id": "https://maht.azurewebsites.net/inc/json-schemas/avatar.json",
	"required": ["id", "mbr_id", "being", "categories", "context", "command_word", "description", "names"],
	"type": "object",
	"name": "Avatar",
	"properties": {
		"id": {
			"description": "uuid of avatar",
			"type": "string",
			"format": "uuid"
		},
		"mbr_id": {
			"type": "string",
			"description": "root member id: [sysName|id]",
			"$comment": "also partitionId for container; NOTE: sysName should not render down to any boolean version of false"
		},
		"parent_id": {
			"type": "string",
			"format": "uuid",
			"description": "parent id of avatar, can be a core member avatar or any sub-object in system, as referenced by uuid alone"
		},
		"assistant": {
			"type": "object",
			"$ref": "#/$defs/openai_gpt_assistant",
			"description": "assistant object GPT_assistant access",
			"$comment": "this could become an array of assistants, with `type` going away"
		},
		"being": {
			"type": "string",
			"const": "avatar",
			"description": "root constructor for avatar/agent in MyLife"
		},
		"categories": {
			"type": "array",
			"description": "array of categories for avatar",
			"items": {
				"type": "string",
				"maxLength": 32,
				"minLength": 1,
				"description": "avatar-build category"
			},
			"maxItems": 12,
			"minItems": 1,
			"uniqueItems": true,
			"$comment": "Categories for any construct (i.e., not just avatars) are dynamically built by LLM and assigned on creation, spokes of the wheel of contextualization"
		},
		"command_word": {
			"type": "string",
			"maxLength": 16,
			"minLength": 2,
			"default": "avatar",
			"description": "trigger for command mode"
		},
		"description": {
			"type": "string",
			"description": "avatar description"
		},
		"developers": {
			"type": "array",
			"description": "endpoint developers"
		},
		"context": {
			"type": "string",
			"default": "This avatar was auto-generated by the MyLife system on file creation date to fulfill MyLife's member contract with this member (anonymously identified by `mbr_id`)",
			"description": "avatar context: describes how avatar is used in the uber-context of MyLife",
			"$comment": "might describe the history of the avatar, or the context in which it was created, used, was successful, to whome it spoke, etc."
		},
		"name": {
			"type": "string",
			"maxLength": 32,
			"minLength": 1,
			"description": "avatar system name",
			"$comment": "may ultimately be removed in favor of `names` array"
		},
		"names": {
			"type": "array",
			"description": "avatar names array",
			"items": {
				"type": "string",
				"maxLength": 32,
				"minLength": 1,
				"description": "avatar name",
				"$comment": "will convert name to `name` object ultimately, should be independent file, as it can be applied to many (if not all) objects"
			},
			"maxItems": 128,
			"minItems": 1,
			"uniqueItems": true,
			"$comment": "Can item contents reference the schema of the name property?"
		},
		"nickname": {
			"type": "string",
			"maxLength": 64,
			"default": "avatar",
			"description": "avatar nickname"
		},
		"messages": {
			"type": "array",
			"items": {
				"type": "object",
				"maxItems": 256,
				"description": "openai message object",
				"$comment": "https://platform.openai.com/docs/api-reference/messages"
			},
			"description": "array of openai messages for avatar",
			"$comment": "NOTE: actually belongs in session, but here would only capture messages in active thread"
		},
		"purpose": {
			"type": "string",
			"description": "avatar purpose"
		},
		"thread": {
			"type": "object",
			"$ref": "#/$defs/openai_thread",
			"description": "thread object for avatar, currently from openAI assistant technology",
			"$comment": "NOTE: actually belongs in session, but here would only capture active thread"
		},
		"type": {
			"type": "string",
			"default": "openai_assistant",
			"enum": ["openai_assistant"],
			"$comment": "In attempt to make assistants more modular, define external system type here, and then add optional data-elements from appropriate sub_assistant type"	
		}
	},
	"$defs": {
		"openai_gpt_assistant": {
			"name": "Openai_gpt_assistant",
			"required": ["id", "object", "created_at", "name", "description", "model"],
			"type": "object",
			"properties": {
				"id": {
					"type": "string",
					"description": "id on openai"
				},
				"object": {
					"type": "string",
					"const": "assistant",
					"description": "from openai node sdk, type of entity"
				},
				"created_at": {
					"type": "integer",
					"description": "UNIX timestamp"
				},
				"name": {
					"type": "string",
					"maxLength": 256,
					"minLength": 1,
					"description": "name of assistant"
				},
				"description": {
					"type": "string",
					"maxLength": 512,
					"minLength": 1,
					"description": "description of assistant"
				},
				"model": {
					"type": "string",
					"description": "model of assistant"
				},
				"instructions": {
					"type": "string",
					"maxLength": 32768,
					"description": "instructions for assistant"
				},
				"tools": {
					"type": "array",
					"description": "A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant.",
					"items": {
						"oneOf": [
							{"$ref": "#/$defs/openai_gpt_code_interpreter"}, 
							{"$ref": "#/$defs/openai_gpt_retrieval"}, 
							{"$ref": "#/$defs/openai_gpt_function"}
						],
						"description": "tool for assistant"
					},
					"maxItems": 128,
					"minItems": 0,
					"uniqueItems": true
				},
				"file_ids": {
					"type": "array",
					"description": "A list of file IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order",
					"items": {
						"type": "string",
						"maxLength": 256,
						"minLength": 1,
						"description": "file id for assistant"
					},
					"maxItems": 32,
					"minItems": 1,
					"uniqueItems": true
				},
				"metadata": {
					"type": "object",
					"description": "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long"
				}
			},
			"additionalProperties": false
		},
		"openai_gpt_code_interpreter": {
			"name": "Openai_gpt_code_interpreter",
			"required": ["type"],
			"type": "object",
			"properties": {
				"type": {
					"type": "string",
					"const": "code_interpreter",
					"description": "The type of tool being defined"
				}
			},
			"additionalProperties": false
		},
		"openai_gpt_retrieval": {
			"name": "Openai_gpt_retrieval",
			"required": ["type"],
			"type": "object",
			"properties": {
				"type": {
					"type": "string",
					"const": "retrieval",
					"description": "The type of tool being defined"
				}
			},
			"additionalProperties": false
		},
		"openai_gpt_function": {
			"name": "Openai_gpt_function",
			"required": ["type"],
			"type": "object",
			"properties": {
				"type": {
					"type": "string",
					"const": "function",
					"description": "The type of tool being defined"
				},
				"function": {
					"type": "object",
					"$ref": "#/$defs/openai_gpt_function_function",
					"description": "The type of function being defined"
				}
			},
			"additionalProperties": false
		},
		"openai_gpt_function_function": {
			"name": "Openai_gpt_function_function",
			"required": ["description", "name"],
			"type": "object",
			"properties": {
				"description": {
					"type": "string",
					"description": "A description of what the function does, used by the model to choose when and how to call the function"
				},
				"name": {
					"type": "string",
					"pattern": "^[a-zA-Z0-9_-]{1,64}$",
					"maxLength": 64,
					"description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."
				},
				"parameters": {
					"type": "object",
					"description": "The parameters the functions accepts, described as a JSON Schema object. See the guide for examples, and the JSON Schema reference for documentation about the format. To describe a function that accepts no parameters, provide the value {\"type\": \"object\", \"properties\": {}}."
				}
			},
			"additionalProperties": false
		},
		"openai_thread": {
			"name": "Openai_thread",
			"required": ["id", "object", "created_at", "metadata"],
			"type": "object",
			"properties": {
				"id": {
					"type": "string",
					"description": "id on openai"
				},
				"object": {
					"type": "string",
					"const": "thread",
					"description": "from openai node sdk, type of entity"
				},
				"created_at": {
					"type": "integer",
					"description": "UNIX timestamp"
				},
				"metadata": {
					"type": "object",
					"default": {},
					"maxProperties": 16,
					"description": "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long"
				}
			},
			"additionalProperties": false
		}
	}
}