{
	"$schema": "http://json-schema.org/schema",
	"$id": "https://maht.azurewebsites.net/inc/json-schemas/avatar.json",
	"required": ["being", "categories", "context", "command_word", "description", "id", "mbr_id",  "metadata", "object_id", "names", "purpose", "type"],
	"type": "object",
	"name": "Avatar",
	"properties": {
		"being": {
			"type": "string",
			"const": "avatar",
			"description": "root constructor for avatar/agent in MyLife"
		},
		"bots": {
			"type": "array",
			"description": "array of external bot-agents of avatar",
			"items": {
				"type": "object",
				"$ref": "./bot.json",
				"maxItems": 32,
				"description": "external bot-agent object",
				"$comment": "essentially the bot-agent legion created from self-defining instructionsets, currently leveraging OpenAI API GPTs"
			}
		},
		"categories": {
			"type": "array",
			"description": "array of categories for avatar",
			"items": {
				"type": "string",
				"maxLength": 32,
				"minLength": 1,
				"not": {
					"enum": [
						"assistant",
						"being",
						"bots",
						"categories",
						"command_word",
						"context",
						"contributions",
						"description",
						"developers",
						"id",
						"mbr_id",
						"messages",
						"metadata",
						"name",
						"names",
						"object_id",
						"purpose",
						"type"
					]
				},
				"description": "avatar-build category with validation protections",
				"$comment": "cannot contain spaces, use underscores or camelCase"
			},
			"maxItems": 12,
			"minItems": 1,
			"uniqueItems": true,
			"$comment": "Categories for any construct (i.e., not just avatars) are dynamically built by LLM and assigned/inherited on creation, spokes of the wheel of contextualization"
		},
		"command_word": {
			"type": "string",
			"maxLength": 16,
			"minLength": 2,
			"default": "avatar",
			"description": "trigger for command mode"
		},
		"context": {
			"type": "string",
			"default": "This avatar assistant was generated by the MyLife Member Services Platform for Member: `this.mbr_id` to assist with the herein identified `purpose` as relates to the avatar's underlying data object `this.object_id` and as initially attempted to proscribe in `this.categories`",
			"description": "MyLife Avatar context description evolves over time as indicated in comments below",
			"$comment": "**note**: may include the history of the avatar, or the context in which this avatar has been used, was deemed successful, contributed values, to whom it spoke, etc."
		},
		"contributions": {
			"type": "array",
			"default": [],
			"maxItems": 6,
			"$ref": "./contribution.json",
			"description": "array of contributions to avatar, not distinct to single core, contributions could be applied to keys (whether adding/updating) inside _any_ object",
			"$comment": "20231202 limiting to 3 contributions per avatar, as it will be simpler to check, and mechanic _could_ be too costly to scale, and by time of scale likely to have a better solution"
		},
		"description": {
			"type": "string",
			"default": "MyLife Avatars are an advanced JavaScript class, integral to MyLife's application's data and presentation layers. They comprise, represent and evolve their underlying data and make contributions to intelligently modify the underlying object's data. For instance, an avatar can seek to update its biographical information (random data field from required default array of `categories`) about its human member, and pass that information to the session as a potential contribution to the human's data core. Avatars are intended to be easily configurable, allowing untechnical members to tailor avatar behavior per use case all through RESTful APIs. Avatars emit system event hooks to signal data changes, pivotal for the dynamic platform and responsive UX.",
			"description": "avatar description",
			"$comment": "**note**: description tailored to gpt-assistants"
		},
		"developers": {
			"type": "array",
			"description": "endpoint developers"
		},
		"id": {
			"description": "uuid of avatar",
			"type": "string",
			"format": "uuid"
		},
		"mbr_id": {
			"type": "string",
			"description": "root member id: [sysName|id]",
			"$comment": "also partitionId for container; NOTE: sysName should not render down to any boolean version of false"
		},
		"messages": {
			"type": "array",
			"items": {
				"type": "object",
				"maxItems": 256,
				"description": "openai message object",
				"$comment": "https://platform.openai.com/docs/api-reference/messages"
			},
			"description": "array of openai messages for avatar",
			"$comment": "NOTE: actually belongs in session, but here would only capture messages in active thread"
		},
		"metadata": {
			"type": "object",
			"default": {},
			"additionalProperties": true,
			"description": "avatar metadata, established as named key/value pairs (map)",
			"$comment": "currently here to capture same field name as openai"
		},
		"name": {
			"type": "string",
			"maxLength": 32,
			"minLength": 1,
			"description": "avatar system name",
			"$comment": "may ultimately be removed in favor of `names` array"
		},
		"names": {
			"type": "array",
			"description": "avatar names array",
			"items": {
				"type": "string",
				"maxLength": 32,
				"minLength": 1,
				"description": "avatar name",
				"$comment": "will convert name to `name` object ultimately, should be independent file, as it can be applied to many (if not all) objects"
			},
			"maxItems": 128,
			"minItems": 1,
			"uniqueItems": true,
			"$comment": "Can item contents reference the schema of the name property?"
		},
		"nickname": {
			"type": "string",
			"maxLength": 64,
			"default": "avatar",
			"description": "avatar nickname"
		},
		"object_being": {
			"type": "string",
			"default": "human",
			"description": "proxy for object_id.core.being so that it is available to the \"impersonating\" avatar (although this descriptive could be anything at all that is objectified"
		},
		"object_id": {
			"type": "string",
			"format": "uuid",
			"description": "Id of `object` that this avatar represents, can be a core human member avatar or any sub-object in system, as referenced by uuid alone"
		},
		"parent_id": {
			"type": "string",
			"format": "uuid",
			"description": "one-time object id for avatar",
			"$comment": "**deprecating**"
		},
		"purpose": {
			"type": "string",
			"default": "The purpose of this avatar is to understand, represent and evolve the underlying data object or concept as referenced by `object_id` inherent type",
			"minLength": 64,
			"description": "avatar purpose: the what to which the superintelligence is applied",
			"$comment": "Generic, should most certainly be once-intelligently tailored to the underlying object, and then be further able to be modified by the user or the MyLife system itself, through the `contribution` process"
		},
		"type": {
			"type": "string",
			"default": "openai_assistant",
			"enum": ["openai_assistant"],
			"$comment": "In attempt to make assistants more modular, define external system type here, and then add optional data-elements from appropriate sub_assistant type"	
		}
	},
	"additionalProperties": true
}